# -*- coding:utf-8 -*-
"""
@Author  :   g1879
@Contact :   g1879@qq.com
"""
from configparser import RawConfigParser
from http.cookiejar import Cookie
from pathlib import Path
from typing import Any, Union, List, Tuple

from requests.adapters import HTTPAdapter
from requests.auth import HTTPBasicAuth
from requests.cookies import RequestsCookieJar
from selenium.webdriver.chrome.options import Options


class OptionsManager(object):
    ini_path: str = ...
    _conf: RawConfigParser = ...
    paths: dict = ...
    chrome_options: dict = ...
    session_options: dict = ...

    def __init__(self, path: str = None): ...

    def __getattr__(self, item) -> dict: ...

    def get_value(self, section: str, item: str) -> Any: ...

    def get_option(self, section: str) -> dict: ...

    def set_item(self, section: str, item: str, value: Any) -> None: ...

    def remove_item(self, section: str, item: str) -> None: ...

    def save(self, path: str = None) -> str: ...

    def save_to_default(self) -> str: ...


class SessionOptions(object):
    def __init__(self, read_file: bool = True, ini_path: str = None):
        self.ini_path: str = ...
        self._download_path: str = ...
        self._headers: dict = ...
        self._cookies: list = ...
        self._auth: tuple = ...
        self._proxies: dict = ...
        self._hooks: dict = ...
        self._params: dict = ...
        self._verify: bool = ...
        self._cert: Union[str, tuple] = ...
        self._adapters: list = ...
        self._stream: bool = ...
        self._trust_env: bool = ...
        self._max_redirects: int = ...
        self._timeout: float = ...
        self._del_set: set = ...

    @property
    def download_path(self) -> str: ...

    def set_paths(self, download_path: Union[str, Path]) -> SessionOptions: ...

    @property
    def timeout(self) -> Union[int, float]: ...

    def set_timeout(self, second: Union[int, float]) -> SessionOptions: ...

    @property
    def headers(self) -> dict: ...

    def set_headers(self, headers: Union[dict, None]) -> SessionOptions: ...

    def set_a_header(self, attr: str, value: str) -> SessionOptions: ...

    def remove_a_header(self, attr: str) -> SessionOptions: ...

    @property
    def cookies(self) -> list: ...

    def set_cookies(self, cookies: Union[RequestsCookieJar, list, tuple, str, dict, None]) -> SessionOptions: ...

    @property
    def auth(self) -> Union[Tuple[str, str], HTTPBasicAuth]: ...

    def set_auth(self, auth: Union[Tuple[str, str], HTTPBasicAuth, None]) -> SessionOptions: ...

    @property
    def proxies(self) -> dict: ...

    def set_proxies(self, http: Union[str, None], https: Union[str, None] = None) -> SessionOptions: ...

    @property
    def hooks(self) -> dict: ...

    def set_hooks(self, hooks: Union[dict, None]) -> SessionOptions: ...

    @property
    def params(self) -> dict: ...

    def set_params(self, params: Union[dict, None]) -> SessionOptions: ...

    @property
    def verify(self) -> bool: ...

    def set_verify(self, on_off: Union[bool, None]) -> SessionOptions: ...

    @property
    def cert(self) -> Union[str, tuple]: ...

    def set_cert(self, cert: Union[str, Tuple[str, str], None]) -> SessionOptions: ...

    @property
    def adapters(self): list: ...

    def add_adapter(self, url: str, adapter: HTTPAdapter) -> SessionOptions: ...

    @property
    def stream(self) -> bool: ...

    def set_stream(self, on_off: Union[bool, None]) -> SessionOptions: ...

    @property
    def trust_env(self) -> bool: ...

    def set_trust_env(self, on_off: Union[bool, None]) -> SessionOptions: ...

    @property
    def max_redirects(self) -> int: ...

    def _sets(self, arg: str, val: Any) -> None: ...

    def set_max_redirects(self, times: Union[int, None]) -> SessionOptions: ...

    def save(self, path: str = None) -> str: ...

    def save_to_default(self) -> str: ...

    def as_dict(self) -> dict: ...


class DriverOptions(Options):

    def __init__(self, read_file: bool = True, ini_path: str = None):
        self.ini_path: str = ...
        self._driver_path: str = ...
        self._user_data_path: str = ...
        self._download_path: str = ...

    @property
    def driver_path(self) -> str: ...

    @property
    def download_path(self) -> str: ...

    @property
    def chrome_path(self) -> str: ...

    @property
    def browser_path(self) -> str: ...

    @property
    def user_data_path(self) -> str: ...

    # -------------重写父类方法，实现链式操作-------------
    def add_argument(self, argument: str) -> DriverOptions: ...

    def set_capability(self, name: str, value: str) -> DriverOptions: ...

    def add_extension(self, extension: str) -> DriverOptions: ...

    def add_encoded_extension(self, extension: str) -> DriverOptions: ...

    def add_experimental_option(self, name: str, value: Union[str, int, dict, List[str]]) -> DriverOptions: ...

    # -------------重写父类方法结束-------------

    def save(self, path: str = None) -> str: ...

    def save_to_default(self) -> str: ...

    def remove_argument(self, value: str) -> DriverOptions: ...

    def remove_experimental_option(self, key: str) -> DriverOptions: ...

    def remove_all_extensions(self) -> DriverOptions: ...

    def set_argument(self, arg: str, value: Union[bool, str]) -> DriverOptions: ...

    def set_timeouts(self, implicit: float = None, pageLoad: float = None, script: float = None) -> DriverOptions: ...

    def set_headless(self, on_off: bool = True) -> DriverOptions: ...

    def set_no_imgs(self, on_off: bool = True) -> DriverOptions: ...

    def set_no_js(self, on_off: bool = True) -> DriverOptions: ...

    def set_mute(self, on_off: bool = True) -> DriverOptions: ...

    def set_user_agent(self, user_agent: str) -> DriverOptions: ...

    def set_proxy(self, proxy: str) -> DriverOptions: ...

    def set_page_load_strategy(self, value: str) -> DriverOptions: ...

    def set_paths(self,
                  driver_path: Union[str, Path] = None,
                  chrome_path: Union[str, Path] = None,
                  browser_path: Union[str, Path] = None,
                  local_port: Union[int, str] = None,
                  debugger_address: str = None,
                  download_path: str = None,
                  user_data_path: str = None,
                  cache_path: str = None) -> DriverOptions: ...

    def as_dict(self) -> dict: ...


def chrome_options_to_dict(options: Union[dict, DriverOptions, Options, None, bool]) -> Union[dict, None]: ...


def session_options_to_dict(options: Union[dict, SessionOptions, None]) -> Union[dict, None]: ...


def cookie_to_dict(cookie: Union[Cookie, str, dict]) -> dict: ...


def cookies_to_tuple(cookies: Union[RequestsCookieJar, list, tuple, str, dict]) -> tuple: ...
